// <auto-generated />
using System;
using EasylifeAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasylifeAPI.Migrations
{
    [DbContext(typeof(EasyLifeApiDBContext))]
    [Migration("20220928121205_First Migration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CleaningComponent", b =>
                {
                    b.Property<int>("CleaningsCleaningid")
                        .HasColumnType("int");

                    b.Property<int>("Componentsid")
                        .HasColumnType("int");

                    b.HasKey("CleaningsCleaningid", "Componentsid");

                    b.HasIndex("Componentsid");

                    b.ToTable("CleaningComponent", (string)null);
                });

            modelBuilder.Entity("ComponentOrder", b =>
                {
                    b.Property<int>("Componentsid")
                        .HasColumnType("int");

                    b.Property<int>("OrdersOrderid")
                        .HasColumnType("int");

                    b.HasKey("Componentsid", "OrdersOrderid");

                    b.HasIndex("OrdersOrderid");

                    b.ToTable("ComponentOrder", (string)null);
                });

            modelBuilder.Entity("ComponentWorker", b =>
                {
                    b.Property<int>("Componentsid")
                        .HasColumnType("int");

                    b.Property<int>("WorkersWorkerid")
                        .HasColumnType("int");

                    b.HasKey("Componentsid", "WorkersWorkerid");

                    b.HasIndex("WorkersWorkerid");

                    b.ToTable("WorkerSkills", (string)null);
                });

            modelBuilder.Entity("EasylifeAPI.Cleaning", b =>
                {
                    b.Property<int>("Cleaningid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cleaningid"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Cleaningid");

                    b.HasIndex(new[] { "Name" }, "UQ__Service__737584F69C077536")
                        .IsUnique();

                    b.ToTable("Cleanings");
                });

            modelBuilder.Entity("EasylifeAPI.Client", b =>
                {
                    b.Property<int>("Clientid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Clientid"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Clientid");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EasylifeAPI.Component", b =>
                {
                    b.Property<int>("Componentsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Componentsid"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<double>("TimeMinuts")
                        .HasColumnType("float");

                    b.HasKey("Componentsid");

                    b.HasIndex(new[] { "Name" }, "UQ__ServiceC__737584F6AA6BDFC9")
                        .IsUnique();

                    b.ToTable("Components");
                });

            modelBuilder.Entity("EasylifeAPI.Order", b =>
                {
                    b.Property<int>("Orderid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Orderid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("RealEstateid")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeStart")
                        .HasColumnType("time(0)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalTime")
                        .HasColumnType("float");

                    b.HasKey("Orderid");

                    b.HasIndex("RealEstateid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EasylifeAPI.RealEstate", b =>
                {
                    b.Property<int>("RealEstateid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RealEstateid"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<int>("Clientid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("RealEstateid");

                    b.HasIndex("Clientid");

                    b.ToTable("RealEstates");
                });

            modelBuilder.Entity("EasylifeAPI.Worker", b =>
                {
                    b.Property<int>("Workerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Workerid"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<double>("WorkExperience")
                        .HasColumnType("float");

                    b.HasKey("Workerid");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("OrderWorker", b =>
                {
                    b.Property<int>("OrdersOrderid")
                        .HasColumnType("int");

                    b.Property<int>("WorkersWorkerid")
                        .HasColumnType("int");

                    b.HasKey("OrdersOrderid", "WorkersWorkerid");

                    b.HasIndex("WorkersWorkerid");

                    b.ToTable("WorkerOrder", (string)null);
                });

            modelBuilder.Entity("CleaningComponent", b =>
                {
                    b.HasOne("EasylifeAPI.Cleaning", null)
                        .WithMany()
                        .HasForeignKey("CleaningsCleaningid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasylifeAPI.Component", null)
                        .WithMany()
                        .HasForeignKey("Componentsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComponentOrder", b =>
                {
                    b.HasOne("EasylifeAPI.Component", null)
                        .WithMany()
                        .HasForeignKey("Componentsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasylifeAPI.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComponentWorker", b =>
                {
                    b.HasOne("EasylifeAPI.Component", null)
                        .WithMany()
                        .HasForeignKey("Componentsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasylifeAPI.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersWorkerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasylifeAPI.Order", b =>
                {
                    b.HasOne("EasylifeAPI.RealEstate", "RealEstate")
                        .WithMany("Orders")
                        .HasForeignKey("RealEstateid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("EasylifeAPI.RealEstate", b =>
                {
                    b.HasOne("EasylifeAPI.Client", "Client")
                        .WithMany("RealEstates")
                        .HasForeignKey("Clientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("OrderWorker", b =>
                {
                    b.HasOne("EasylifeAPI.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasylifeAPI.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersWorkerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasylifeAPI.Client", b =>
                {
                    b.Navigation("RealEstates");
                });

            modelBuilder.Entity("EasylifeAPI.RealEstate", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
